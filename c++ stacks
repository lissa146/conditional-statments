#include <iostream>
#include <stack>
#include <string>

using namespace std;

// Function declarations
void makeSandwhich(stack<string>& sandwhich);
bool checksandwhichStack(stack<string>& sandwhich);
bool checksandwhichStack2(stack<string>& sandwhich);

int main() {
    stack<string> mysandwhichStack;
    makeSandwhich(mysandwhichStack);

    if (checksandwhichStack(mysandwhichStack) || checksandwhichStack2(mysandwhichStack)) {
        cout << "super man this BLT is delicious" << endl;
    }
    else {
        cout << "Opps this is not quite what I had in mind" << endl;
    }

    return 0;
}

// Function to build a pancake stack using a stack
void makeSandwhich(stack<string>& sandwhich) {
    string topping;
    cout << "Enter meal items one by one to build your stack (type 'done' to finish): \n";
    while (true) {
        cout << "Add item: ";
        getline(cin, topping);
        if (topping == "done") break;
        sandwhich.push(topping);
    }
}

// Function to check if the pancake stack matches the perfect stack
bool checksandwhichStack(stack<string>& sandwhich) {
    stack<string> perfectStack;
    perfectStack.push("bread");
    perfectStack.push("tomato");
    perfectStack.push("lettuce");
    perfectStack.push("bacon");
    perfectStack.push("bread");
    perfectStack.push("plate");

    // Compare each element of both stacks
    while (!sandwhich.empty() && !perfectStack.empty()) {
        if (sandwhich.top() != perfectStack.top()) return false;
        sandwhich.pop();
        perfectStack.pop();
    }

    // Check both stacks separately for better clarity
    if (sandwhich.empty() && perfectStack.empty()) {
        return true;  // Both stacks are empty, so they match
    }
    else {
        return false; // One stack still has elements, so they don't match
    }
}
bool checksandwhichStack2(stack<string>& sandwhich) {
    stack<string> perfectStack2;
    perfectStack2.push("bread");
    perfectStack2.push("mayo");
    perfectStack2.push("tomato");
    perfectStack2.push("lettuce");
    perfectStack2.push("bacon");
    perfectStack2.push("bread");

    // Compare each element of both stacks
    while (!sandwhich.empty() && !perfectStack2.empty()) {
        if (sandwhich.top() != perfectStack2.top()) return false;
        sandwhich.pop();
        perfectStack2.pop();
    }

    // Check both stacks separately for better clarity
    if (sandwhich.empty() && perfectStack2.empty()) {
        return true;  // Both stacks are empty, so they match
    }
    else {
        return false; // One stack still has elements, so they don't match
    }
}
